# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2017-06-30 09:39
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orgid', models.CharField(max_length=24, verbose_name='所属ID')),
                ('device_type', model_utils.fields.StatusField(blank=True, choices=[('SERVER', 'SERVER'), ('NETWORK', 'NETWORK')], default='SERVER', max_length=100, no_check_for_status=True, null=True, verbose_name='资产类型')),
                ('device_status', model_utils.fields.StatusField(blank=True, choices=[('RUNNING', 'RUNNING'), ('MAINTANCING', 'MAINTANCING'), ('STOCK', 'STOCK')], default='RUNNING', max_length=100, no_check_for_status=True, null=True, verbose_name='资产状态')),
                ('sn', models.CharField(db_index=True, max_length=64, verbose_name='SN号')),
                ('product_name', models.CharField(blank=True, max_length=64, null=True, verbose_name='产品型号')),
                ('manage_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='管理IP')),
                ('unit', models.SmallIntegerField(verbose_name='机器U数')),
                ('latest_date', models.DateTimeField(null=True, verbose_name='最新更新日期')),
                ('create_at', models.DateField(null=True, verbose_name='采购日期')),
            ],
            options={
                'verbose_name_plural': '资产表',
            },
        ),
        migrations.CreateModel(
            name='AssetRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orgid', models.CharField(blank=True, max_length=24, verbose_name='所属ID')),
                ('content', models.TextField(verbose_name='资产内容')),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Asset', verbose_name='资产对象')),
            ],
            options={
                'verbose_name_plural': '资产记录表',
            },
        ),
        migrations.CreateModel(
            name='CmdbLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', model_utils.fields.StatusField(choices=[('INFO', 'INFO'), ('DEBUG', 'DEBUG'), ('WARN', 'WARN'), ('ERROR', 'ERROR')], default='INFO', max_length=100, no_check_for_status=True, verbose_name='日志级别')),
                ('orgid', models.CharField(max_length=64, verbose_name='所属ID')),
                ('title', models.CharField(max_length=64, verbose_name='标题')),
                ('content', models.TextField(verbose_name='内容')),
                ('create_at', models.DateTimeField(verbose_name='创建时间')),
            ],
        ),
        migrations.CreateModel(
            name='Cpu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sn', models.CharField(db_index=True, max_length=32, verbose_name='sn编号')),
                ('manufacturer', model_utils.fields.StatusField(choices=[('Intel', 'Intel'), ('AMD', 'AMD'), ('IBM', 'IBM'), ('IDT', 'IDT')], default='Intel', max_length=100, no_check_for_status=True, verbose_name='制造商')),
                ('model', models.CharField(max_length=64, verbose_name='型号')),
                ('frequency', models.CharField(blank=True, max_length=16, null=True, verbose_name='主频')),
            ],
            options={
                'verbose_name_plural': 'CPU信息表',
            },
        ),
        migrations.CreateModel(
            name='Disk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disk_type', model_utils.fields.StatusField(choices=[('SATA', 'SATA'), ('SSD', 'SSD'), ('SAS', 'SAS'), ('SCSI', 'SCSI'), ('IDE', 'IDE')], default='SATA', max_length=100, no_check_for_status=True, null=True, verbose_name='磁盘类型')),
                ('model', models.CharField(blank=True, max_length=32, null=True, verbose_name='磁盘型号')),
                ('capacity', models.FloatField(blank=True, verbose_name='磁盘容量GB')),
                ('slot', models.CharField(blank=True, max_length=8, null=True, verbose_name='插槽位')),
            ],
            options={
                'verbose_name_plural': '硬盘表',
            },
        ),
        migrations.CreateModel(
            name='ErrorLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orgid', models.CharField(blank=True, max_length=24, null=True, verbose_name='所属ID')),
                ('title', models.CharField(max_length=16, verbose_name='标题')),
                ('content', models.TextField(verbose_name='日志内容')),
                ('create_at', models.DateTimeField(auto_now_add=True)),
                ('asset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.Asset')),
            ],
            options={
                'verbose_name_plural': '错误日志表',
            },
        ),
        migrations.CreateModel(
            name='IDC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orgid', models.CharField(max_length=24, verbose_name='所属ID')),
                ('name', models.CharField(max_length=15, verbose_name='IDC机房名称')),
                ('address', models.CharField(blank=True, max_length=128, null=True, verbose_name='地址')),
                ('description', models.CharField(max_length=128, null=True, verbose_name='IDC描述信息')),
            ],
            options={
                'verbose_name_plural': 'IDC信息表',
            },
        ),
        migrations.CreateModel(
            name='IPSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orgid', models.CharField(max_length=24, verbose_name='所属ID')),
                ('iptype', model_utils.fields.StatusField(choices=[('EXT', 'EXT'), ('INT', 'INT')], default='EXT', max_length=100, no_check_for_status=True, verbose_name='类型')),
                ('ips', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP地址')),
                ('mask', models.GenericIPAddressField(blank=True, null=True, verbose_name='子网掩码')),
                ('gateway', models.GenericIPAddressField(blank=True, null=True, verbose_name='网关')),
                ('description', models.CharField(blank=True, max_length=64, null=True, verbose_name='描述')),
                ('idc', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.IDC')),
            ],
            options={
                'verbose_name_plural': '网段信息表',
            },
        ),
        migrations.CreateModel(
            name='Liasion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orgid', models.CharField(max_length=24, verbose_name='所属ID')),
                ('name', models.CharField(max_length=32, verbose_name='姓名')),
                ('phone', models.CharField(blank=True, max_length=15, null=True, verbose_name='电话')),
                ('position', models.CharField(max_length=64, verbose_name='职务')),
                ('work_content', models.CharField(max_length=128, verbose_name='负责内容')),
            ],
            options={
                'verbose_name_plural': '联系信息表',
            },
        ),
        migrations.CreateModel(
            name='Memory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sn', models.CharField(blank=True, db_index=True, max_length=64, verbose_name='内存SN号')),
                ('model', models.CharField(max_length=64, null=True, verbose_name='型号')),
                ('capacity', models.FloatField(blank=True, verbose_name='容量G')),
                ('rate', models.CharField(blank=True, max_length=16, null=True, verbose_name='速率')),
                ('slot', models.CharField(max_length=32, null=True, verbose_name='插槽位')),
            ],
            options={
                'verbose_name_plural': '内存表',
            },
        ),
        migrations.CreateModel(
            name='NetworkDevice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_type', model_utils.fields.StatusField(choices=[('SWITCH', 'SWITCH'), ('FIREWALL', 'FIREWALL'), ('ROUTER', 'ROUTER'), ('OTHER', 'OTHER')], default='SWITCH', max_length=100, no_check_for_status=True, verbose_name='设备类型')),
                ('vlan_ip', models.CharField(blank=True, max_length=64, null=True, verbose_name='VlanIP')),
                ('intranet_ip', models.CharField(blank=True, max_length=128, null=True, verbose_name='内网IP')),
                ('port_num', models.SmallIntegerField(blank=True, null=True, verbose_name='端口个数')),
                ('device_detail', models.CharField(blank=True, max_length=255, null=True, verbose_name='设置详细配置')),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='repository.Asset')),
            ],
            options={
                'verbose_name_plural': '网络设备',
            },
        ),
        migrations.CreateModel(
            name='NIC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=128, verbose_name='网卡名称')),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='网卡型号')),
                ('mac', models.CharField(blank=True, db_index=True, max_length=64, verbose_name='网卡MAC地址')),
                ('ipaddrs', models.GenericIPAddressField(blank=True, null=True, verbose_name='ip地址')),
                ('netmask', models.GenericIPAddressField(blank=True, null=True, verbose_name='掩码')),
                ('gateway', models.GenericIPAddressField(blank=True, null=True, verbose_name='网关')),
                ('note', models.CharField(max_length=64, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': '网卡表',
            },
        ),
        migrations.CreateModel(
            name='Plans',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orgid', models.CharField(max_length=24, verbose_name='所属ID')),
                ('name', models.CharField(db_index=True, max_length=15, unique=True, verbose_name='套餐名称')),
                ('cpu', models.SmallIntegerField(default=1, verbose_name='cpu核数')),
                ('mem', models.IntegerField(default=1, verbose_name='内存大小GB')),
                ('disk', models.IntegerField(default=100, verbose_name='磁盘大小GB')),
                ('description', models.CharField(blank=True, max_length=64, null=True, verbose_name='描述')),
            ],
            options={
                'verbose_name_plural': '套餐信息',
            },
        ),
        migrations.CreateModel(
            name='PlansServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plans', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Plans')),
            ],
        ),
        migrations.CreateModel(
            name='Rack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orgid', models.CharField(max_length=24, verbose_name='所属ID')),
                ('room', models.CharField(blank=True, max_length=18, null=True, verbose_name='房间号')),
                ('name', models.CharField(max_length=32, verbose_name='机柜名称')),
                ('power_capacity', models.CharField(blank=True, max_length=32, null=True, verbose_name='功率容量')),
                ('max_units', models.SmallIntegerField(verbose_name='最大U位')),
                ('description', models.CharField(blank=True, max_length=128, null=True, verbose_name='机柜描述')),
                ('idc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.IDC', verbose_name='所属机房')),
            ],
            options={
                'verbose_name_plural': '机柜信息表',
            },
        ),
        migrations.CreateModel(
            name='RackUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orgid', models.CharField(max_length=24, verbose_name='所属ID')),
                ('unit_number', models.SmallIntegerField(verbose_name='机架号')),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='repository.Asset')),
                ('rack', models.ForeignKey(max_length=24, on_delete=django.db.models.deletion.CASCADE, to='repository.Rack', verbose_name='所属机柜')),
            ],
            options={
                'verbose_name_plural': '机柜使用表',
            },
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('s_type', model_utils.fields.StatusField(choices=[('CLOUD', 'CLOUD'), ('ENTITY', 'ENTITY'), ('VMSYSTEM', 'VMSYSTEM')], default='CLOUD', max_length=100, no_check_for_status=True, verbose_name='服务器类型')),
                ('hostname', models.CharField(max_length=128, unique=True, verbose_name='主机名称')),
                ('raid', model_utils.fields.StatusField(blank=True, choices=[('RAID5', 'RAID5'), ('RAID0', 'RAID0'), ('RAID1', 'RAID1'), ('RAID10', 'RAID10'), ('RAID6', 'RAID6'), ('DIRECT', 'DIRECT')], default='RAID5', max_length=100, no_check_for_status=True, null=True, verbose_name='raid卡')),
                ('os_platform', models.CharField(blank=True, max_length=16, null=True, verbose_name='系统')),
                ('os_version', models.CharField(blank=True, max_length=16, null=True, verbose_name='系统版本')),
                ('int_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='内网IP')),
                ('ext_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='外网IP')),
                ('note', models.CharField(blank=True, max_length=128, null=True, verbose_name='备注')),
                ('create_at', models.DateField(blank=True, verbose_name='创建时间')),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='repository.Asset')),
            ],
            options={
                'verbose_name_plural': '服务器表',
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('orgid', models.CharField(max_length=24, verbose_name='所属ID')),
                ('name', models.CharField(max_length=32, verbose_name='名称')),
            ],
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_type', model_utils.fields.StatusField(choices=[('ISP', 'ISP'), ('ASSET', 'ASSET'), ('IDC', 'IDC')], default='ISP', max_length=100, no_check_for_status=True, verbose_name='供应商类型')),
                ('orgid', models.CharField(max_length=24, verbose_name='所属ID')),
                ('name', models.CharField(max_length=64, verbose_name='厂商名称')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='联系地址')),
                ('note', models.CharField(blank=True, max_length=128, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': '供应商信息表',
            },
        ),
        migrations.AlterUniqueTogether(
            name='vendor',
            unique_together=set([('name', 'orgid', 'vendor_type')]),
        ),
        migrations.AlterUniqueTogether(
            name='tags',
            unique_together=set([('orgid', 'name')]),
        ),
        migrations.AddField(
            model_name='plansserver',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Server'),
        ),
        migrations.AddField(
            model_name='plans',
            name='server',
            field=models.ManyToManyField(blank=True, through='repository.PlansServer', to='repository.Server', verbose_name='关联服务器'),
        ),
        migrations.AddField(
            model_name='nic',
            name='server_nic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nic', to='repository.Server'),
        ),
        migrations.AddField(
            model_name='memory',
            name='server_mem',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memory', to='repository.Server'),
        ),
        migrations.AddField(
            model_name='memory',
            name='vendor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.Vendor', verbose_name='制造商'),
        ),
        migrations.AddField(
            model_name='liasion',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Vendor'),
        ),
        migrations.AddField(
            model_name='ipsection',
            name='verdor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repository.Vendor', verbose_name='运行商'),
        ),
        migrations.AddField(
            model_name='idc',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Vendor', verbose_name='厂商'),
        ),
        migrations.AddField(
            model_name='disk',
            name='server_disk',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='disk', to='repository.Server'),
        ),
        migrations.AddField(
            model_name='cpu',
            name='server_cpu',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='CPU', to='repository.Server'),
        ),
        migrations.AddField(
            model_name='asset',
            name='tags',
            field=models.ManyToManyField(blank=True, to='repository.Tags'),
        ),
        migrations.AddField(
            model_name='asset',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repository.Vendor', verbose_name='供应商'),
        ),
        migrations.AlterUniqueTogether(
            name='rackunit',
            unique_together=set([('orgid', 'rack', 'unit_number')]),
        ),
        migrations.AlterUniqueTogether(
            name='rack',
            unique_together=set([('name', 'orgid')]),
        ),
        migrations.AlterUniqueTogether(
            name='plansserver',
            unique_together=set([('plans', 'server')]),
        ),
        migrations.AlterUniqueTogether(
            name='plans',
            unique_together=set([('name', 'orgid')]),
        ),
        migrations.AlterUniqueTogether(
            name='nic',
            unique_together=set([('name', 'mac')]),
        ),
        migrations.AlterUniqueTogether(
            name='liasion',
            unique_together=set([('orgid', 'vendor', 'phone')]),
        ),
        migrations.AlterUniqueTogether(
            name='ipsection',
            unique_together=set([('ips', 'orgid', 'idc')]),
        ),
        migrations.AlterUniqueTogether(
            name='idc',
            unique_together=set([('name', 'orgid')]),
        ),
        migrations.AlterUniqueTogether(
            name='asset',
            unique_together=set([('orgid', 'sn', 'product_name')]),
        ),
    ]
